### TODO ###
# ctest
# GitLab CI
# Custom color output
# Documentation (psi4)
# pkg-config
# PtScotch support

CMAKE_MINIMUM_REQUIRED(VERSION 3.0 FATAL_ERROR)

### Project ###
PROJECT(elsi
  VERSION 2018.02
  LANGUAGES Fortran C)
SET(elsi_URL "http://elsi-interchange.org")
SET(elsi_EMAIL "elsi-team@duke.edu")
SET(elsi_LICENSE "BSD 3")
SET(elsi_DESCRIPTION "Electronic Structure Infrastructure")

### Installation paths ###
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)
SET(CMAKE_Fortran_MODULE_DIRECTORY "${CMAKE_BINARY_DIR}/include")
SET(LIBRARY_OUTPUT_PATH "${CMAKE_BINARY_DIR}/lib")
SET(ARCHIVE_OUTPUT_PATH "${CMAKE_BINARY_DIR}/lib")
SET(EXECUTABLE_OUTPUT_PATH "${CMAKE_BINARY_DIR}/bin")
IF(NOT DEFINED CMAKE_INSTALL_INCLUDEDIR)
  SET(CMAKE_INSTALL_INCLUDEDIR "include" CACHE PATH "Location to install module and header files")
ENDIF()
IF(NOT DEFINED CMAKE_INSTALL_LIBDIR)
  SET(CMAKE_INSTALL_LIBDIR "lib" CACHE PATH "Location to install library files")
ENDIF()
IF(NOT DEFINED CMAKE_INSTALL_BINDIR)
  SET(CMAKE_INSTALL_BINDIR "bin" CACHE PATH "Location to install binary files")
ENDIF()
MESSAGE(STATUS "ELSI will be installed to: ${CMAKE_INSTALL_PREFIX}")

### Options ###
OPTION(ENABLE_TESTS "Build ELSI tests" OFF)
OPTION(ENABLE_PEXSI "Enable PEXSI" OFF)
OPTION(ENABLE_SIPS "Enable SIPs" OFF)
OPTION(ENABLE_ELPA_BGQ "Use ELPA BlueGene Q kernel" OFF)
OPTION(ENABLE_ELPA_AVX "Use ELPA AVX kernel" OFF)
OPTION(ENABLE_ELPA_AVX2 "Use ELPA AVX2 kernel" OFF)
OPTION(ENABLE_ELPA_AVX512 "Use ELPA AVX512 kernel" OFF)

IF(ENABLE_PEXSI)
  ENABLE_LANGUAGE(CXX)
ENDIF()

### MPI ###
FIND_PACKAGE(MPI REQUIRED)
IF(MPI_CXX_FOUND)
  MESSAGE(STATUS "Found MPI CXX compiler: ${MPI_CXX_COMPILER}")
  INCLUDE_DIRECTORIES(${MPI_CXX_INCLUDE_PATH})
  SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} ${MPI_CXX_COMPILE_FLAGS})
  SET(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${MPI_CXX_LINK_FLAGS})
ELSEIF(ENABLE_PEXSI)
  MESSAGE(FATAL_ERROR "MPI CXX compiler not found")
ENDIF()
IF(MPI_C_FOUND)
  MESSAGE(STATUS "Found MPI C compiler: ${MPI_C_COMPILER}")
  INCLUDE_DIRECTORIES(${MPI_C_INCLUDE_PATH})
  SET(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} ${MPI_C_COMPILE_FLAGS})
  SET(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${MPI_C_LINK_FLAGS})
ELSEIF(ENABLE_C)
  MESSAGE(FATAL_ERROR "MPI C compiler not found")
ENDIF()
IF(MPI_Fortran_FOUND)
  MESSAGE(STATUS "Found MPI Fortran compiler: ${MPI_Fortran_COMPILER}")
  INCLUDE_DIRECTORIES(${MPI_Fortran_INCLUDE_PATH})
  SET(CMAKE_Fortran_FLAGS ${CMAKE_Fortran_FLAGS} ${MPI_Fortran_COMPILE_FLAGS})
  SET(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${MPI_Fortran_LINK_FLAGS})
ELSE()
  MESSAGE(FATAL_ERROR "MPI Fortran compiler not found")
ENDIF()

### Compilations ###
INCLUDE(elpa)
IF(NOT ELPA_FOUND)
  ADD_SUBDIRECTORY(external/ELPA)
  SET(ELPA_LIB "${CMAKE_BINARY_DIR}/lib/libelpa.a")
ENDIF()

INCLUDE(libomm)
IF(NOT OMM_FOUND)
  ADD_SUBDIRECTORY(external/libOMM)
  SET(OMM_LIB "${CMAKE_BINARY_DIR}/lib/libOMM.a;${CMAKE_BINARY_DIR}/lib/libMatrixSwitch.a")
ENDIF()

IF(ENABLE_PEXSI)
  MESSAGE(STATUS "Enabling PEXSI")

  INCLUDE(superlu)
  IF(NOT SUPERLU_FOUND)
    ADD_SUBDIRECTORY(external/SuperLU_DIST)
    SET(SUPERLU_LIB "${CMAKE_BINARY_DIR}/lib/libsuperlu_dist.a")
  ENDIF()

  ADD_SUBDIRECTORY(external/PEXSI)
  SET(PEXSI_LIB "${CMAKE_BINARY_DIR}/lib/libpexsi.a")
ENDIF()

IF(ENABLE_SIPS)
  INCLUDE(sips)
  MESSAGE(STATUS "Enabling SIPs")
  ADD_SUBDIRECTORY(external/SIPs)
  SET(SIPS_LIB "${CMAKE_BINARY_DIR}/lib/libsips.a")
ENDIF()

ADD_SUBDIRECTORY(src)

IF(ENABLE_TESTS)
  MESSAGE(STATUS "Enabling test programs")
  INCLUDE(mathlib)
  INCLUDE_DIRECTORIES(src)
  ADD_SUBDIRECTORY(test)
ENDIF()

cmake_minimum_required(VERSION 3.2)
project(elsi
  VERSION 2018.02
  LANGUAGES Fortran)
set(elsi_URL "http://elsi-interchange.org")
set(elsi_EMAIL "elsi-team@duke.edu")
set(elsi_LICENSE "BSD-3")
set(elsi_DESCRIPTION "Electronic Structure Infrastructure")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)
set(elsi_dir ${CMAKE_SOURCE_DIR}/src/ELSI)
set(elpa_dir ${CMAKE_SOURCE_DIR}/src/ELPA)
set(omm_dir ${CMAKE_SOURCE_DIR}/src/libOMM)
set(pexsi_dir ${CMAKE_SOURCE_DIR}/src/PEXSI)
set(sips_dir ${CMAKE_SOURCE_DIR}/src/SIPs)

option(ENABLE_C_INTERFACE "Enable ELSI C interface" OFF)
option(ENABLE_TESTS "Enable ELSI tests" OFF)
option(ENABLE_PEXSI "Enable PEXSI" OFF)
option(ENABLE_SIPS "Enable SIPs" OFF)
option(ENABLE_ELPA_GPU "Use ELPA GPU" OFF)
option(ENABLE_ELPA_BGQ "Use ELPA BlueGene Q kernel" OFF)
option(ENABLE_ELPA_AVX "Use ELPA AVX kernel" OFF)
option(ENABLE_ELPA_AVX2 "Use ELPA AVX2 kernel" OFF)
option(ENABLE_ELPA_AVX512 "Use ELPA AVX512 kernel" OFF)

if(ENABLE_PEXSI)
  enable_language(C)
  enable_language(CXX)
  set(ENABLE_C ON)
  set(ENABLE_CXX ON)
  include_directories(${pexsi_dir}/include)
  add_subdirectory(${pexsi_dir})
  set(EXTRA_LIBS ${EXTRA_LIBS} pexsi)
  message(STATUS "Enabling C language")
  message(STATUS "Enabling CXX language")
  message(STATUS "Enabling PEXSI")
endif()

if(ENABLE_SIPS)
  message(STATUS "Enabling SIPs")
  add_subdirectory(${sips_dir})
  set(EXTRA_LIBS ${EXTRA_LIBS} qetsc)
endif()

if(ENABLE_C_INTERFACE)
  enable_language(C)
  set(ENABLE_C ON)
  include_directories(${elsi_dir}/c_binding)
  message(STATUS "Enabling ELSI C interface")
endif()

if(ENABLE_ELPA_AVX512)
  if(NOT ENABLE_C)
    enable_language(C)
    set(ENABLE_C ON)
    message(STATUS "Enabling C language")
  endif()
  message(STATUS "Enabling ELPA AVX 512 kernel")
elseif(ENABLE_ELPA_AVX2)
  if(NOT ENABLE_C)
    enable_language(C)
    set(ENABLE_C ON)
    message(STATUS "Enabling C language")
  endif()
  message(STATUS "Enabling ELPA AVX 2 kernel")
elseif(ENABLE_ELPA_AVX)
  if(NOT ENABLE_C)
    enable_language(C)
    set(ENABLE_C ON)
    message(STATUS "Enabling C language")
  endif()
  message(STATUS "Enabling ELPA AVX kernel")
endif()

set(CMAKE_Fortran_MODULE_DIRECTORY ${CMAKE_BINARY_DIR}/include)
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib)
set(ARCHIVE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib)
set(LIBS ${LIBS} ${SCALAPACK_LIBRARIES})

find_package(MPI REQUIRED)
if(MPI_CXX_FOUND)
  message(STATUS "Found MPI CXX compiler: ${MPI_CXX_COMPILER}")
  include_directories(${MPI_CXX_INCLUDE_PATH})
  set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} ${MPI_CXX_COMPILE_FLAGS})
  set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${MPI_CXX_LINK_FLAGS})
  set(LIBS ${LIBS} ${MPI_CXX_LIBRARIES})
elseif(ENABLE_CXX)
  message(FATAL_ERROR "MPI CXX compiler not found")
endif()
if(MPI_C_FOUND)
  message(STATUS "Found MPI C compiler: ${MPI_C_COMPILER}")
  include_directories(${MPI_C_INCLUDE_PATH})
  set(CMAKE_CXX_FLAGS ${CMAKE_C_FLAGS} ${MPI_C_COMPILE_FLAGS})
  set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${MPI_C_LINK_FLAGS})
  set(LIBS ${LIBS} ${MPI_C_LIBRARIES})
elseif(ENABLE_C)
  message(FATAL_ERROR "MPI C compiler not found")
endif()
if(MPI_Fortran_FOUND)
  message(STATUS "Found MPI Fortran compiler: ${MPI_Fortran_COMPILER}")
  include_directories(${MPI_Fortran_INCLUDE_PATH})
  set(CMAKE_Fortran_FLAGS ${CMAKE_Fortran_FLAGS} ${MPI_Fortran_COMPILE_FLAGS})
  set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${MPI_Fortran_LINK_FLAGS})
  set(LIBS ${LIBS} ${MPI_Fortran_LIBRARIES})
else()
  message(FATAL_ERROR "MPI Fortran compiler not found")
endif()

# Not used if not linking
#find_package(MKL)
#if(MKL_FOUND)
#  message(STATUS "Found MKL library: ${}")
#  set(LIBS ${LIBS} ${MKL_LIBRARIES})
#else()
#  find_package(ScaLAPACK REQUIRED)
#    message(STATUS "Found ScaLAPACK library: ${}")
#    set(LIBS ${LIBS} ${SCALAPACK95_LIBRARIES})
#  find_package(LAPACK REQUIRED)
#    message(STATUS "Found LAPACK library: ${}")
#    set(LIBS ${LIBS} ${LAPACK95_LIBRARIES})
#  find_package(BLAS REQUIRED)
#    message(STATUS "Found BLAS library: ${}")
#    set(LIBS ${LIBS} ${BLAS95_LIBRARIES})
#endif()

find_package(ELPA)
if(ELPA_FOUND)
  message(STATUS "Found ELPA library: " ${ELPA_LIBRARIES})
  include_directories(${ELPA_INCLUDE_DIRS})
  set(LIBS ${LIBS} ${ELPA_LIBRARIES})
else()
  message(STATUS "Enabling internal version of ELPA")
  add_subdirectory(${elpa_dir})
  set(LIBS ${LIBS} elpa)
  set(INTERNAL_ELPA ON)
endif()

find_package(OMM)
if(LIBOMM_FOUND)
  message(STATUS "Found libOMM library: " ${OMM_LIBRARIES})
  include_directories(${OMM_INCLUDE_DIRS})
  set(LIBS ${LIBS} ${OMM_LIBRARIES})
else()
  message(STATUS "Enabling internal version of libOMM")
  add_subdirectory(${omm_dir})
  set(LIBS ${LIBS} MatrixSwitch omm)
  set(INTERNAL_OMM ON)
endif()

add_subdirectory(${elsi_dir})

if(ENABLE_TESTS)
  add_subdirectory(${elsi_dir}/test)
endif()

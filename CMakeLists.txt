cmake_minimum_required(VERSION 3.2)
project(elsi
        VERSION 2018.02
        LANGUAGES Fortran)
set(elsi_URL "http://elsi-interchange.org")
set(elsi_EMAIL "elsi-team@duke.edu")
set(elsi_LICENSE "BSD-3")
set(elsi_DESCRIPTION "Electronic Structure Infrastructure")

set(elsi_dir ${CMAKE_SOURCE_DIR}/src/ELSI)
set(elpa_dir ${CMAKE_SOURCE_DIR}/src/ELPA)
set(omm_dir ${CMAKE_SOURCE_DIR}/src/libOMM)
set(pexsi_dir ${CMAKE_SOURCE_DIR}/src/PEXSI)
set(sips_dir ${CMAKE_SOURCE_DIR}/src/SIPs)

option(enable_c_interface "Enable ELSI C interface" OFF)
option(enable_pexsi "Enable PEXSI" OFF)
option(enable_sips "Enable SIPs" OFF)
option(enable_elpa_gpu "Use ELPA GPU" OFF)
option(enable_elpa_bgq "Use ELPA BlueGene Q kernel" OFF)
option(enable_elpa_avx "Use ELPA AVX kernel" OFF)
option(enable_elpa_avx2 "Use ELPA AVX2 kernel" OFF)
option(enable_elpa_avx512 "Use ELPA AVX512 kernel" OFF)

if(enable_pexsi)
  enable_language(C)
  enable_language(CXX)
  set(enable_c ON)
  set(enable_cxx ON)
  message(STATUS "Enabling C")
  message(STATUS "Enabling CXX")
  message(STATUS "Enabling PEXSI")
endif()

if(enable_sips)
  message(STATUS "Enabling SIPs")
endif()

if(enable_c_interface)
  enable_language(C)
  set(enable_c ON)
  message(STATUS "Enabling ELSI C interface")
endif()

if(enable_elpa_avx512)
  if(NOT enable_c)
    enable_language(C)
    set(enable_c ON)
    message(STATUS "Enabling C")
  endif()
  message(STATUS "Enabling ELPA AVX 512 kernel")
elseif(enable_elpa_avx2)
  if(NOT enable_c)
    enable_language(C)
    set(enable_c ON)
    message(STATUS "Enabling C")
  endif()
  message(STATUS "Enabling ELPA AVX 2 kernel")
elseif(enable_elpa_avx)
  if(NOT enable_c)
    enable_language(C)
    set(enable_c ON)
    message(STATUS "Enabling C")
  endif()
  message(STATUS "Enabling ELPA AVX kernel")
endif()

set(CMAKE_Fortran_MODULE_DIRECTORY ${CMAKE_BINARY_DIR}/inc)
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib)
set(ARCHIVE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib)

find_package(MPI REQUIRED)
#TODO Added elseif for the failure of finding mpi
if(MPI_CXX_FOUND)
  message(STATUS "Found CXX MPI compiler: ${MPI_CXX_COMPILER}")
  include_directories(${MPI_CXX_INCLUDE_PATH})
  set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} ${MPI_CXX_COMPILE_FLAGS})
  set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${MPI_CXX_LINK_FLAGS})
  set(LIBS ${LIBS} ${MPI_CXX_LIBRARIES})
endif()
if(MPI_C_FOUND)
  message(STATUS "Found C MPI compiler: ${MPI_C_COMPILER}")
  include_directories(${MPI_C_INCLUDE_PATH})
  set(CMAKE_CXX_FLAGS ${CMAKE_C_FLAGS} ${MPI_C_COMPILE_FLAGS})
  set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${MPI_C_LINK_FLAGS})
  set(LIBS ${LIBS} ${MPI_C_LIBRARIES})
endif()
if(MPI_Fortran_FOUND)
  message(STATUS "Found Fortran MPI compiler: ${MPI_Fortran_COMPILER}")
  include_directories(${MPI_Fortran_INCLUDE_PATH})
  set(CMAKE_Fortran_FLAGS ${CMAKE_Fortran_FLAGS} ${MPI_Fortran_COMPILE_FLAGS})
  set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${MPI_Fortran_LINK_FLAGS})
  set(LIBS ${LIBS} ${MPI_Fortran_LIBRARIES})
endif()

#find_package(MKL)
#if(MKL_FOUND)
#  message(STATUS "Found MKL library: " ${MKL_LIBRARIES})
#  set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${MKL_LINKER_FLAGS})
#  set(LIBS ${LIBS} ${MKL_LIBRARIES})
#else()
#  find_package(SCALAPACK REQUIRED)
#  if(SCALAPACK_FOUND)
#    message(STATUS "Found ScaLAPACK library: " ${SCALAPACK_LIBRARIES})
#    set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${SCALAPACK_LINKER_FLAGS})
#    set(LIBS ${LIBS} ${SCALAPACK_LIBRARIES})
#  else()
#    message(WARNING "Warning: could not find a ScaLAPACK library")
#  endif()
#  find_package(LAPACK REQUIRED)
#  if(LAPACK_FOUND)
#    message(STATUS "Found LAPACK library: " ${LAPACK_LIBRARIES})
#    set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${LAPACK_LINKER_FLAGS})
#    set(LIBS ${LIBS} ${LAPACK_LIBRARIES})
#  else()
#    message(WARNING "Warning: could not find a LAPACK library")
#  endif()
#  find_package(BLAS REQUIRED)
#  if(BLAS_FOUND)
#    message(STATUS "Found BLAS library: " ${BLAS_LIBRARIES})
#    set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${BLAS_LINKER_FLAGS})
#    set(LIBS ${LIBS} ${BLAS_LIBRARIES})
#  else()
#    message(WARNING "Warning: could not find a BLAS library")
#  endif()    
#endif()
#
#find_package(ELPA)
#if(ELPA_FOUND)
#  message(STATUS "Found ELPA library: " ${ELPA_LIBRARIES})
#  set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${ELPA_LINKER_FLAGS})
#  set(LIBS ${LIBS} ${ELPA_LIBRARIES})
#else()
  add_subdirectory(${elpa_dir})
#endif()

#find_package(LIBOMM)
#if(LIBOMM_FOUND)
#  message(STATUS "Found libOMM library: " ${LIBOMM_LIBRARIES})
#  set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${LIBOMM_LINKER_FLAGS})
#  set(LIBS ${LIBS} ${LIBOMM_LIBRARIES})
#else()
  add_subdirectory(${omm_dir})
#endif()
#
add_subdirectory(${elsi_dir})
#if(enable_pexsi)
#  add_subdirectory(${pexsi_dir})
#endif()
#if(enable_sips)
#  add_subdirectory(${sips_dir})
#endif()

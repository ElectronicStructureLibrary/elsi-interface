====================================
HOW TO USE ELSI IN A FORTRAN PROGRAM
====================================

==========================
A) QUICK PROGRAMMING GUIDE
==========================

   After ELSI is built successfully, it can be used in a Fortran program by putting

      USE ELSI

   statement into the source code.

   Before calling ELSI to treat the Kohn-Sham eigenvalue problem, MPI and BLACS
   environment should be set up by the electronic structure code.

   The typical workflow of ELSI within an electronic structure code is:

==================
1) Initialize ELSI
==================

   For efficiency, this should be done once, BERORE the SCF loop begins.

*  call elsi_init(solver, parallelism, storage, size, n_electrons, n_states)

   solver:           [integer] [in]  Available choices are ELPA (1), LIBOMM (2),
                                     and PEXSI (3).

   parallelism:      [integer] [in]  SINGLE_PROC (0) or MULTI_PROC(1).

   storage:          [integer] [in]  Only BLACS_DENSE (0) is supported. More formats
                                     are coming in the future.

   size:             [integer] [in]  Global size of the Hamiltonian matrix.

   n_electrons:      [real*8]  [in]  Number of electrons.

   n_states:         [integer] [in]  Number of states. For ELPA, this can be larger
                                     than the number of occupied states. For libOMM,
                                     this must be exactly the number of OCCUPIED 
                                     states. PEXSI does not use n_states.

===============================================
2) Set up MPI and BLACS infrastructure for ELSI
===============================================

*  call elsi_set_mpi(elsi_mpi_comm)

   elsi_mpi_comm:    [integer] [in]  MPI communicator used in ELSI.

*  call elsi_set_blacs(blacs_ctxt, block_row, block_col, n_procs_row, n_procs_col)

   blacs_ctxt:       [integer] [in]  BLACS context.

   block_row:        [integer] [in]  Block size in row direction.

   block_col:        [integer] [in]  Block size in column direction.

   n_procs_row:      [integer] [in]  Number of processors in row.

   n_procs_col:      [integer] [in]  Number of processors in column.

============================================================
3) Treat the Kohn-Sham eigenvalue problem using ELSI solvers
============================================================

   This should be done WITHIN the SCF loops.

   Customize routines are all OPTIONAL. ELSI sets reasonable default parameters for
   each solver. However, these default settings do not always guarantee the best
   performance. Every single technical parameter within each solver is accessible
   to experienced users by using the customize routines, i.e. elsi_customize_elpa,
   elsi_customize_omm, elsi_customize_pexsi, and elsi_customize.

*  call elsi_customize_{elpa|omm|pexxi}(keyword1=choice1, keyword2=choice2, ...)

   Launch either ELSI eigenvalue solver, or ELSI density matrix solver.

*  call elsi_ev_real(H, S, e_val, e_vec)

   H:                [real*8]  [in]  Hamiltonian matrix.

   S:                [real*8]  [in]  Overlap matrix.

   e_val:            [real*8] [out]  Eigenvalues.

   e_vec:            [real*8] [out]  Eigenvectors.

*  call elsi_dm_real(H, S, D, energy)

   H:                [real*8]  [in]  Hamiltonian matrix.

   S:                [real*8]  [in]  Overlap matrix.

   D:                [real*8] [out]  Density matrix.

   energy:           [real*8] [out]  Energy.

================
4) Finalize ELSI
================

   This should be done once, AFTER the SCF cycle converges.

*  call elsi_finalize()

====================
B) COMPILATION GUIDE
====================

   At compile time, the include/library path of ELSI is needed.

   A typical setup in the Makefile would be

      ELSI_INCLUDE = -I${ELSI_HOME}/include

      ELSI_LIB = -L${ELSI_HOME}/lib -lelsi \
                 -lOMM -lMatrixSwitch -lpspblas -lelpa -lpexsi \
                 -L${SUPERLU_HOME}/lib -lsuperlu \
                 -L${PARMETIS_HOME}/lib -lparmetis -lmetis

   NOTE: If PEXSI is disabled by setting DISABLE_CXX = yes in the "make.sys" file,
         the following ELSI_LIB should be used:

      ELSI_LIB = -L${ELSI_HOME}/lib -lelsi \
                 -lOMM -lMatrixSwitch -lpspblas -lelpa

   Then add ${ELSI_INCLUDE}/${ELSI_LIB} to the compiler/linker flags.

   NOTE: -Wl,--allow-multiple-definition and -lstdc++ might be necessary in the
         final link. 

====================
C) BEYOND THIS GUIDE
====================

*  Usage of ELSI density matrix solver for complex problems are work-in-progress and
   EXPERIMENTAL.

*  EXPERIMENTAL C interfaces can be built by setting

      C_INTERFACE = yes

   in the "make.sys" file.

*  Documentation of each module, subroutine, and function in ELSI interface can be
   generated using Doxygen in ./src/ELSI/doc directory.

===================
D) TROUBLE SHOOTING
===================

   For comments, feedback, ideas, ..., please email elsi-team@duke.edu

   http://elsi-interchange.org

   Copyright (c) 2015-2017, ELSI consortium. All rights reserved.

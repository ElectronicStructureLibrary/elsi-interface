#if REALCASE==1
subroutine elpa_reduce_add_vectors_real(vmat_s,ld_s,comm_s,vmat_t,ld_t,comm_t,nvr,nvc,nblk)
#endif
#if COMPLEXCASE==1
subroutine elpa_reduce_add_vectors_complex(vmat_s,ld_s,comm_s,vmat_t,ld_t,comm_t,nvr,nvc,nblk)
#endif

!-------------------------------------------------------------------------------
! This routine does a reduce of all vectors in vmat_s over the communicator comm_t.
! The result of the reduce is gathered on the processors owning the diagonal
! and added to the array of vectors vmat_t (which is distributed over comm_t).
!
! Opposed to elpa_transpose_vectors, there is NO identical copy of vmat_s
! in the different members within vmat_t (else a reduce wouldn't be necessary).
! After this routine, an allreduce of vmat_t has to be done.
!
! vmat_s    array of vectors to be reduced and added
! ld_s      leading dimension of vmat_s
! comm_s    communicator over which vmat_s is distributed
! vmat_t    array of vectors to which vmat_s is added
! ld_t      leading dimension of vmat_t
! comm_t    communicator over which vmat_t is distributed
! nvr       global length of vmat_s/vmat_t
! nvc       number of columns in vmat_s/vmat_t
! nblk      block size of block cyclic distribution
!
!-------------------------------------------------------------------------------

!   use ELPA1 ! for least_common_multiple
#ifdef WITH_OPENMP
   use omp_lib
#endif
   implicit none

   include 'mpif.h'

   integer, intent(in)              :: ld_s, comm_s, ld_t, comm_t, nvr, nvc, nblk
   DATATYPE*BYTESIZE, intent(in)    :: vmat_s(ld_s,nvc)
   DATATYPE*BYTESIZE, intent(inout) :: vmat_t(ld_t,nvc)

   DATATYPE*BYTESIZE, allocatable   :: aux1(:), aux2(:)
   integer                          :: myps, mypt, nps, npt
   integer                          :: n, lc, k, i, ips, ipt, ns, nl, mpierr
   integer                          :: lcm_s_t, nblks_tot
   integer                          :: auxstride, tylerk, error_unit

   call mpi_comm_rank(comm_s,myps,mpierr)
   call mpi_comm_size(comm_s,nps ,mpierr)
   call mpi_comm_rank(comm_t,mypt,mpierr)
   call mpi_comm_size(comm_t,npt ,mpierr)

   ! Look to elpa_transpose_vectors for the basic idea!

   ! The communictation pattern repeats in the global matrix after
   ! the least common multiple of (nps,npt) blocks

   lcm_s_t   = least_common_multiple(nps,npt) ! least common multiple of nps, npt

   nblks_tot = (nvr+nblk-1)/nblk ! number of blocks corresponding to nvr

   allocate(aux1( ((nblks_tot+lcm_s_t-1)/lcm_s_t) * nblk * nvc ))
   allocate(aux2( ((nblks_tot+lcm_s_t-1)/lcm_s_t) * nblk * nvc ))
   aux1(:) = 0
   aux2(:) = 0
#ifdef WITH_OPENMP
   !$omp parallel private(ips, ipt, auxstride, lc, i, k, ns, nl)
#endif
   do n = 0, lcm_s_t-1

      ips = mod(n,nps)
      ipt = mod(n,npt)

      auxstride = nblk * ((nblks_tot - n + lcm_s_t - 1)/lcm_s_t)

      if(myps == ips) then

!         k = 0
#ifdef WITH_OPENMP
         !$omp do
#endif
         do lc=1,nvc
            do i = n, nblks_tot-1, lcm_s_t
	       k = (i - n)/lcm_s_t * nblk + (lc - 1) * auxstride
               ns = (i/nps)*nblk ! local start of block i
               nl = min(nvr-i*nblk,nblk) ! length
               aux1(k+1:k+nl) = vmat_s(ns+1:ns+nl,lc)
!               k = k+nblk
            enddo
         enddo

         k = nvc * auxstride
#ifdef WITH_OPENMP
         !$omp barrier
         !$omp master
#endif
#if REALCASE==1
         if(k>0) call mpi_reduce(aux1,aux2,k,MPI_REAL8,MPI_SUM,ipt,comm_t,mpierr)
#endif

#if COMPLEXCASE==1
         if(k>0) call mpi_reduce(aux1,aux2,k,MPI_DOUBLE_COMPLEX,MPI_SUM,ipt,comm_t,mpierr)
#endif

#ifdef WITH_OPENMP
         !$omp end master
         !$omp barrier
#endif
         if (mypt == ipt) then
!            k = 0
#ifdef WITH_OPENMP
         !$omp do
#endif
            do lc=1,nvc
               do i = n, nblks_tot-1, lcm_s_t
	          k = (i - n)/lcm_s_t * nblk + (lc - 1) * auxstride
                  ns = (i/npt)*nblk ! local start of block i
                  nl = min(nvr-i*nblk,nblk) ! length
                  vmat_t(ns+1:ns+nl,lc) = vmat_t(ns+1:ns+nl,lc) + aux2(k+1:k+nl)
!                  k = k+nblk
               enddo
            enddo
         endif

      endif

   enddo
#ifdef WITH_OPENMP
   !$omp end parallel
#endif

   deallocate(aux1)
   deallocate(aux2)

end subroutine



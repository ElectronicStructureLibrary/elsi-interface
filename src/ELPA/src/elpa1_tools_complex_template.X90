    subroutine hh_transform_complex_PRECISION(alpha, xnorm_sq, xf, tau)

      ! Similar to LAPACK routine ZLARFP, but uses ||x||**2 instead of x(:)
      ! and returns the factor xf by which x has to be scaled.
      ! It also hasn't the special handling for numbers < 1.d-300 or > 1.d150
      ! since this would be expensive for the parallel implementation.
      use precision
#ifdef HAVE_DETAILED_TIMINGS
      use timings
#else
      use timings_dummy
#endif
      implicit none
      complex(kind=COMPLEX_DATATYPE), intent(inout) :: alpha
      real(kind=REAL_DATATYPE), intent(in)       :: xnorm_sq
      complex(kind=COMPLEX_DATATYPE), intent(out)   :: xf, tau

      real(kind=REAL_DATATYPE)                   :: ALPHR, ALPHI, BETA
      
      call timer%start("hh_transform_complex" // PRECISION_SUFFIX)

      ALPHR = real( ALPHA, kind=REAL_DATATYPE )
      ALPHI = PRECISION_IMAG( ALPHA )
      if ( XNORM_SQ==0. .AND. ALPHI==0. ) then

        if ( ALPHR>=0. ) then
          TAU = 0.
        else
          TAU = 2.
          ALPHA = -ALPHA
        endif
        XF = 0.

      else

        BETA = SIGN( SQRT( ALPHR**2 + ALPHI**2 + XNORM_SQ ), ALPHR )
        ALPHA = ALPHA + BETA
        IF ( BETA<0 ) THEN
          BETA = -BETA
          TAU = -ALPHA / BETA
        ELSE
          ALPHR = ALPHI * (ALPHI/real( ALPHA , kind=KIND_PRECISION))
          ALPHR = ALPHR + XNORM_SQ/real( ALPHA, kind=KIND_PRECISION )

          TAU = PRECISION_CMPLX( ALPHR/BETA, -ALPHI/BETA )
          ALPHA = PRECISION_CMPLX( -ALPHR, ALPHI )
        END IF
        XF = CONST_REAL_1_0/ALPHA
        ALPHA = BETA
      endif

      call timer%stop("hh_transform_complex" // PRECISION_SUFFIX)

    end subroutine hh_transform_complex_PRECISION

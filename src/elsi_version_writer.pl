#!/usr/bin/perl

# Copyright (c) 2015-2018, the ELSI team.
# All rights reserved.
#
# This file is part of ELSI and is distributed under the BSD 3-clause license,
# which may be found in the LICENSE file in the ELSI root directory.

# Script to write a Fortran subroutine which includes the information about how
# ELSI is compiled.
# (Taken from FHI-aims with permission of copyright holders)

use strict;

# Obtain version stamp from input arg:
my $VERSION = $ARGV[0];
my $DATESTAMP = $ARGV[1];

# Obtain local time and date from PERL function, and fix up to get proper format
my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime(time);
$year = $year + 1900;
$mon = $mon + 1;
my $date = sprintf("%4d-%02d-%02d", $year, $mon, $mday);
my $time = sprintf("%02d:%02d:%02d", $hour, $min, $sec);

# Now do the same thing, but in UTC and generate a RFC3339-formatted timestamp
my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = gmtime(time);
$year = $year + 1900;
$mon = $mon + 1;
my $datetime = sprintf("%4d-%02d-%02dT%02d:%02d:%02dZ", $year, $mon, $mday, $hour, $min, $sec);

# Hostname
my $hostname = qx/hostname/;
chomp $hostname;
my $host = "$hostname";
if (length($host) > 40){
    $host = substr($host, 0, 40);
};

# Git info
my ($isgitrepos, $gitmsg, $gitret, $ismod, $modlog, $modstr, $gitcommit, $gitcommitabbrev, $gitrev, $gitstr);

# Determine whether commit has been modified
my $perlret = system("git diff --raw --exit-code HEAD >/dev/null 2>&1");
if ($perlret == -1) {
    # Execution failed quite early
    $isgitrepos = 0;
} else {
    print STDERR $gitret;
    $gitret = $perlret >> 8;
    $isgitrepos = $gitret == 0 || $gitret == 1;
}

if ($isgitrepos) {
    # Put the status of the git commit's integrity into pretty strings
    $ismod = $gitret == 1;
    if ($ismod) { $modstr = " (modified)"; } else { $modstr = ""; }
    if ($ismod) { $modlog = ".true."; } else { $modlog = ".false."; }

    # Get the git commit
    $gitrev = qx/git show --no-color --pretty=oneline | head -n 1/;
    chomp $gitrev;
    # Clean git string from special chars that can break the compilation
    $gitrev =~ s/\@/[at]/g;
    $gitrev =~ s/[^A-Za-z 0-9\.,\[\]:\/-_]//g;
    if (length($gitrev) > 40){
        $gitcommit = substr($gitrev, 0, 40);
        $gitcommitabbrev = substr($gitrev, 0, 8);
    };

    # Get only the git commit message
    $gitrev = qx/git show --no-color --pretty=oneline --abbrev-commit | head -n 1/;
    chomp $gitrev;
    # Clean git string from special chars that can break the compilation
    $gitrev =~ s/\@/[at]/g;
    $gitrev =~ s/[^A-Za-z 0-9\.,\[\]:\/-_]//g;
    if (length($gitrev) > 48){
        $gitrev = substr($gitrev, 0, 48);
    };
    $gitmsg = substr($gitrev, 8, length($gitrev));
} else {
    $gitcommit = "UNKNOWN";
    $gitcommitabbrev = "UNKNOWN";
    $modlog = ".false.";
    $gitmsg = "UNKNOWN";
}

print "! Copyright (c) 2015-2018, the ELSI team.\n";
print "! All rights reserved.\n";
print "!\n";
print "! This file is part of ELSI and is distributed under the BSD 3-clause license,\n";
print "! which may be found in the LICENSE file in the ELSI root directory.\n";
print "!\n";
print "!>\n";
print "!! This subroutine returns details about ELSI's compilation, generated by the\n";
print "!! script elsi_version_writer.pl as part of the ELSI make process.\n";
print "!!\n";
print "subroutine elsi_version_info(s1,s2,s3,l1,s4,s5,s6)\n";
print "\n";
print "  implicit none\n";
print "\n";
print "  character(len=8), intent(out) :: s1\n";
print "  character(len=8), intent(out) :: s2\n";
print "  character(len=8), intent(out) :: s3\n";
print "  logical, intent(out) :: l1\n";
print "  character(len=40), intent(out) :: s4\n";
print "  character(len=40), intent(out) :: s5\n";
print "  character(len=20), intent(out) :: s6\n";
print "\n";
print "  character(len=8), parameter :: VERSION = \"$VERSION\"\n";
print "  character(len=8), parameter :: DATESTAMP = \"$DATESTAMP\"\n";
print "  character(len=8), parameter :: COMMIT = \"$gitcommitabbrev\"\n";
print "  logical, parameter :: MODIFIED = $modlog\n";
print "  character(len=40), parameter :: MESSAGE = \"$gitmsg\"\n";
print "  character(len=40), parameter :: HOSTNAME = \"$host\"\n";
print "  character(len=20), parameter :: DATETIME = \"$datetime\"\n";
print "\n";
print "  s1 = VERSION\n";
print "  s2 = DATESTAMP\n";
print "  s3 = COMMIT\n";
print "  l1 = MODIFIED\n";
print "  s4 = MESSAGE\n";
print "  s5 = HOSTNAME\n";
print "  s6 = DATETIME\n";
print "\n";
print "end subroutine\n";
